<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'mautic.report.model.report' shared service.

$a = ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this)));

$this->services['mautic.report.model.report'] = $instance = new \Mautic\ReportBundle\Model\ReportModel($a, ($this->services['mautic.helper.templating'] ?? ($this->services['mautic.helper.templating'] = new \Mautic\CoreBundle\Helper\TemplatingHelper(($this->services['kernel'] ?? $this->get('kernel', 1))))), ($this->services['mautic.channel.helper.channel_list'] ?? $this->getMautic_Channel_Helper_ChannelListService()), ($this->services['mautic.lead.model.field'] ?? $this->getMautic_Lead_Model_FieldService()), ($this->services['mautic.report.helper.report'] ?? ($this->services['mautic.report.helper.report'] = new \Mautic\ReportBundle\Helper\ReportHelper())), ($this->services['mautic.report.model.csv_exporter'] ?? $this->load('getMautic_Report_Model_CsvExporterService.php')), ($this->services['mautic.report.model.excel_exporter'] ?? $this->load('getMautic_Report_Model_ExcelExporterService.php')));

$instance->setEntityManager(($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService()));
$instance->setSecurity(($this->services['mautic.security'] ?? $this->getMautic_SecurityService()));
$instance->setDispatcher(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
$instance->setTranslator(($this->services['translator.default'] ?? $this->getTranslator_DefaultService()));
$instance->setUserHelper(($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()));
$instance->setCoreParametersHelper($a);
$instance->setRouter(($this->services['router'] ?? $this->getRouterService()));
$instance->setLogger(($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
$instance->setSession(($this->services['session'] ?? $this->getSessionService()));

return $instance;
